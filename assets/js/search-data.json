{
  
    
        "post0": {
            "title": "Reproducing Reformer: Our Team Experience",
            "content": "This post was originally pubished on the fast.ai forums here . The Challenge . Way back in October 2020 the Papers With Code ML Reproducibility Challenge 2020 was launched and shared in the fast.ai forums. A few of us jumped at the chance to test our ML knowledge and push our skills. Fast forward 110 days since that initial post and we delivered our Reformer Reproducibility submission via OpenReview! Here are a few reflections on our experience; what we enjoyed, tools we used and what we would have done differently: . TLDR; . Working as a team pushes your motivation, your skills and your throughput | nbdev for development, Weights &amp; Biases for tracking and Discord for communication | We could have better used task/project management tools more, maybe we needed a different tool | Next time we’ll start experiments sooner and maybe pick a more practical paper | It was a massive learning experience and a lot of fun | . . Why participate . Implementing code from scratch is much more enjoyable and meaningful when there is a direct application, e.g. working towards this reproducibility challenge. Spending weeks and months focussed on a single paper forces you to understand the paper down to the last full stop. It also gives you a great appreciation of how difficult writing a good paper is, you see almost every word and sentence is chosen carefully to communicate a particular concept, problem or model setting. . N heads are better than one a.k.a. Multihead Attention . Our team was distributed across 6 countries and everyone had a somewhat different background, set of skills and personality. This mix was definitely beneficial for getting things done much more smoothly. Having 2 x N eyes researching implementation information or reviewing code really improved coverage and sped up the entire process. It also makes debugging much faster! . . Writing code that the entire team will use also meant writing cleaner code with more tests so that it was as clear as possible for your teammates. And finally, during a long project like this it’s easy to get distracted or lazy, however seeing everyone else delivering great work quickly pulls you back into line! . . Good tools are key . nbdev . The nbdev literate programming environment from fast.ai was super convenient to minimise the project’s development friction. Writing tests as we developed meant that we caught multiple bugs early and auto-generation of docs lends itself immensely to the reproducibility of your code. Most of us will be using this again for our next projects. . Weights &amp; Biases . Weights &amp; Biases generously gave us a team account which enabled us all to log our experiments to a single project. Being directly able to link your runs and results to the final report was really nice. Also it&#39;s pretty exciting monitoring 10+ experiments live! . Discord . A Discord server worked really well for all our chat and voice communication. Frequent calls to catchup and agree on next steps were super useful. Todo lists and core pieces of code often ended up as pinned messages for quick reference and linking Github activity to a channel was useful for keeping an eye on new commits to the repo. . Overleaf . When it came to writing the final report in latex, Overleaf was a wonderful tool for collaborative editing. . ReviewNB . The ReviewNB app on GitHub was very useful for visualizing diffs in notebooks. . . Learn from the best . The Reformer architecture had several complex parts, and having Phil Wang&#39;s and HuggingFace&#39;s Github code was very helpful to understand design decisions and fix issues. . Things we can improve for the next time . Start experiments early . We started our experiments quite late in the project; as we aimed to reimplement Reformer in Pytorch (with reference to existing implementations) about ~90% of our time was spent on ensuring our implementation was faithful to the paper and that it was working correctly. In retrospect starting experiments earlier would have allowed more in depth exploration of what we observed while testing. Full scale experiments have a way of inducing problems you didn’t foresee during the implementation phase... . Task distribution and coordination . When working in a distributed and decentralized team, efficient task allocation and tracking is important. Early in the project todo lists lived in people’s heads, or were quickly buried under 50 chat messages. This was suboptimal for a number of reasons, including that it made involving new people in the project more challenging as they could not easily identify where they could best contribute. . We made a switch to Trello to better track open tasks. It worked reasonably well however its effectiveness was probably proportional to how much time a couple of team members had to review the kanban board, advocate for its use and focus the team’s attention there. The extra friction associated with needing to use another tool unconnected to Github or Discord was probably the reason for why we didn’t use it as much as we could have. Integrating Trello into our workflow or giving Github Projects a trial could have been useful. . More feedback . We had originally intended to get feedback from the fastai community during the project. In the end we were too late in sharing our material, so there wasn’t time for much feedback. Early feedback would have been very useful and the project might have benefited from some periodic summary of accomplishments and current problems. We could have solicited additional feedback from the authors too. . Distributed training . This was our first exposure to distributed training and unfortunately we had a lot of issues with it. We were also unable to log the results from distributed runs properly to Weights &amp; Biases. This slowed down our experiment iteration speed and is why we could not train our models for as long as we would have preferred. . . Choice of paper to reproduce . It would have been useful to calculate a rough estimate of the compute budget the paper’s experiments required before jumping into it. In the latter stages of the project we realised that we would be unable to fully replicate some of the paper’s experiments, but instead had to run scaled down versions. In addition, where your interest sits between theoretical and practical papers should be considered when selecting a paper for the challenge. . More tools . We could have tried even more handy tools such as knockknock to alert us when models are finished training and Github Projects for task management. . Some final thoughts . We came out of this project even more motivated compared to how we entered; a great indication that it was both enjoyable and useful for us! Our advice would be to not hesitate to join events like this one and challenge yourself, and try and find one or more other folks in the forums or Discord to work with. After successfully delivering our submission to the challenge we are all eager to work together again on our next project, stay tuned for more! . . Thanks for Reading This Far &#128591; . As always, I would love to hear your feedback, what could have been written better or clearer, you can find me on twitter: @PriyanK7n .",
            "url": "https://priyank7n.github.io/fastblogs/nlp/reformer/transformers/language-modelling/2021/02/11/reformer-reproducibility-challenge.html",
            "relUrl": "/nlp/reformer/transformers/language-modelling/2021/02/11/reformer-reproducibility-challenge.html",
            "date": " • Feb 11, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Covid_19_project",
            "content": "",
            "url": "https://priyank7n.github.io/fastblogs/2021/01/27/Covid_19_Project.html",
            "relUrl": "/2021/01/27/Covid_19_Project.html",
            "date": " • Jan 27, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Covify Code",
            "content": "",
            "url": "https://priyank7n.github.io/fastblogs/2021/01/18/covify-code.html",
            "relUrl": "/2021/01/18/covify-code.html",
            "date": " • Jan 18, 2021"
        }
        
    
  
    
  
    
        ,"post4": {
            "title": "Covify",
            "content": "About . This notebook Contains UI And its Functionalities that are:- . We Can upload a CT Scan Image and Our Model Covify will predict on that image wether the image uploaded is of a Covid Infected person or not. | When we Click the Classifiy button the model gives a softmax probability of the decision it made and how strongly it tries to put forward its integrity | We can then also click on the Magic Button that shows a heat map of all the activations in the image uploaded that tells us which all activations influenced the model to take certain decisions. | . Covid Prediction on CT Scan Images . when we click on CT Scan images , Our Model predicts wether it is covid or not and also a heat map showcasing its predictions. . Non-Covid Prediction on CT Scan Images . when we click on CT Scan images , Our Model predicts wether it is covid or not and also a heat map showcasing its predictions. . Heatmaps . This is a heat map of the image showcasing which activations or parts of the image led the model to predict wether the person is covid or not . Applications . Deep learning, which is a popular research area of artificial intelligence (AI), enables the creation of end-to-end models to achieve promised results using input data, without the need for manual feature extraction. . | We have used CT scan images to not sacrifice on quality but also to improve speed of data diagnosis. . | In order to combat COVID the Current need of the hour is building Medical Diagnosis Support Systems that are Fast, Reliable, Efficient, and Effective. . | Conventional Covid-19 tests that is PCR (Polymerase chain reaction) test are time consuming and also leads to much more False-Negative and False Positive predictions . | We have to send the sample of PCR  to the labs which are sometimes in faraway locations that  is far time consuming . | Sometimes When the doctors and Radiologists are not available at that time we can   generate a preliminary diagnosis  . | Application of machine learning methods for automatic diagnosis in the medical field have recently gained popularity i.e, have become far more essential in early detection  . | Fast and accurate diagnostic methods are heavily needed to combat the disease so that more and more time should be invested in Disease Control . | Note: link to link to my notebook should also work fine. . | . References . https://www.medrxiv.org/content/10.1101/2020.04.24.20078584v3 https://www.kaggle.com/plameneduardo/sarscov2-ctscan-dataset https://github.com/mr7495/COVID-CTset https://jovian.ai/priyank7n/minor-test-run .",
            "url": "https://priyank7n.github.io/fastblogs/jupyter/2020/02/23/GUI-Covify.html",
            "relUrl": "/jupyter/2020/02/23/GUI-Covify.html",
            "date": " • Feb 23, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://priyank7n.github.io/fastblogs/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hey Fella My name is Priyank Negi. I am learning and writing about My interests that is AI , I m an AI and Deep Learning Enthusiast who is fascinated with the world of AI and love to explore new stuff and research that will an impact in real world scenarios followed with responsible use of AI Systems and Data Ethics is Key in building great AI systems. I am always curious and awed by the self driving software of Tesla and Comma AI producing Cars that can tackle almost every situation. . I beleive in Doing Stuff instead of the conventional approach of learning everything but actually doin nothing! I Love to experiment with stuff and Beleive in Project based learning rather than current education system only so i am not a Computer major myself currently pursuing BTech in Electronics &amp; Comm so by following these amazing Courses curated by fast ai team Jeremy howard and syllvian gugger that made DL so easy to actually build stuff with ideas , so I highly recommend checking out these courses as they are excellent to get started and advance in the Feild of AI fast.ai’s . You can reach me out on Twitter or on linkedin! . . Thank you . This site is built with fastpages, An easy to use blogging platform with extra features for Jupyter Notebooks. .",
          "url": "https://priyank7n.github.io/fastblogs/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://priyank7n.github.io/fastblogs/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}